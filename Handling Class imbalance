import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score
from imblearn.over_sampling import SMOTE

# Load the dataset
df = pd.read_csv("path/to/dataset.csv")

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df['text'], df['label'], test_size=0.2, random_state=42)

# Convert the text to a TF-IDF representation
tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)
X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)
X_test_tfidf = tfidf_vectorizer.transform(X_test)

# Oversample the training set to handle class imbalance
oversample = SMOTE()
X_train_tfidf_oversampled, y_train_oversampled = oversample.fit_resample(X_train_tfidf, y_train)

# Train a Random Forest Classifier on the oversampled training set
rfc = RandomForestClassifier(n_estimators=100, random_state=42)
rfc.fit(X_train_tfidf_oversampled, y_train_oversampled)
rfc_preds = rfc.predict(X_test_tfidf)

# Train an SVM Classifier on the oversampled training set
svm = SVC(kernel='linear', random_state=42)
svm.fit(X_train_tfidf_oversampled, y_train_oversampled)
svm_preds = svm.predict(X_test_tfidf)

# Train a Logistic Regression Classifier on the oversampled training set
lr = LogisticRegression(random_state=42)
lr.fit(X_train_tfidf_oversampled, y_train_oversampled)
lr_preds = lr.predict(X_test_tfidf)

# Evaluate the models
rfc_acc = accuracy_score(y_test, rfc_preds)
rfc_prec = precision_score(y_test, rfc_preds)
rfc_recall = recall_score(y_test, rfc_preds)

svm_acc = accuracy_score(y_test, svm_preds)
svm_prec = precision_score(y_test, svm_preds)
svm_recall = recall_score(y_test, svm_preds)

lr_acc = accuracy_score(y_test, lr_preds)
lr_prec = precision_score(y_test, lr_preds)
lr_recall = recall_score(y_test, lr_preds)

print("Random Forest Classifier:")
print("Accuracy:", rfc_acc)
print("Precision:", rfc_prec)
print("Recall:", rfc_recall)

print("SVM Classifier:")
print("Accuracy:", svm_acc)
print("Precision:", svm_prec)
print("Recall:", svm_recall)

print("Logistic Regression Classifier:")
print("Accuracy:", lr_acc)
print("Precision:", lr_prec)
print("Recall:", lr_recall)
