# -*- coding: utf-8 -*-
"""For workshop.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z83MF9F1Mxp4oBS8q-W7NjAYic-ZdD5B

Random forest text analysis with TF-IDF
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score
import joblib

# Load the data into a pandas dataframe
df = pd.read_csv("/content/one column.csv")

# Drop rows containing NaN values from df
df = df.dropna()

# Split the data into training and test sets
train_data, test_data, train_labels, test_labels = train_test_split(df["Posts"], df["a"], test_size=0.2)

# Convert the text data into a numerical format using tf-idf
vectorizer = TfidfVectorizer()
train_vectors = vectorizer.fit_transform(train_data)
test_vectors = vectorizer.transform(test_data)

# Train the random forest classifier on the training data
n_estimators = 100
max_depth = 10
rf_classifier = RandomForestClassifier(n_estimators=n_estimators, max_depth=max_depth)
rf_classifier.fit(train_vectors, train_labels)

# Evaluate the performance of the random forest classifier on the test data
predictions = rf_classifier.predict(test_vectors)
accuracy = accuracy_score(test_labels, predictions)
precision = precision_score(test_labels, predictions, average="macro")
recall = recall_score(test_labels, predictions, average="macro")
print(f"Accuracy: {accuracy}")
print(f"Precision: {precision}")
print(f"Recall: {recall}")

# Saving the model
joblib.dump(rf_classifier, 'rf_model.joblib')

from google.colab import drive
drive.mount('/content/drive')

"""Text Analysis with the trained model"""

# Import the necessary libraries
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier

# Load new text data to be analyzed
new_text = ['Quite a balanced answer to a very emotive subject I thought - well done Dr Shabir.', 'The vaccine is nonsens. It is not saving lives and even not protecting from Corona and it is also not solution for speeding the Corona_only the governments make it people almost obligatory to take it and the people have to obay like mankys!']

# Load the labeled text data and train the random forest model
df = pd.read_csv('/content/Misinfo workshop.csv')
vectorizer = TfidfVectorizer()
X_train_tfidf = vectorizer.fit_transform(df['Description'])
y_train = df['Label']
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier.fit(X_train_tfidf, y_train)

# Convert the new text data into TF-IDF vectors
new_text_tfidf = vectorizer.transform(new_text)
# Make predictions on the new text data using the trained random
